@page "/"
@using BloomPrototype.GameTypes
@using BloomPrototype.GameTypes.Soils
@using BloomPrototype.Services;
@inject MapFactory MapFactory;
@inject IConfiguration Configuration;


<table @onkeydown="e => KeyPress(e)" tabindex="0">
	@for (int y = 0; y < Map.ViewSize; y++)
	{
		<tr>
			@for (int x = 0; x < Map.ViewSize; x++)
			{
				<td>
					<SoilDisplay Soil="MapView[x, y]" PlayerLocation=@Player.Location />
				</td>
			}
		</tr>
	}
</table>

<br/>

<table>
	<tr>
		<td>Days: @Days</td>
		<td>Actions: @Player.Actions</td>
	</tr>
</table>

<br/>
<p>Move: Arrow keys</p>
<p>Complete Day: Enter</p>
<p>Fertilize: J/U</p>
<p>Water: K/I</p>
<p>Tighten: L/O</p>

@code {
	private Map WorldMap;

	private Soil[,] MapView;

	private Player Player;

	private int Days = 0;

	private int startX = 0;
	private int startY = 0;

	protected override void OnParametersSet()
	{
		WorldMap = MapFactory.GenerateMap();
		MapView = WorldMap.GetView(startX, startY);
		Player = new Player(WorldMap, Convert.ToInt32(Configuration["ActionsPerDay"]));

		base.OnInitialized();
	}

	private void KeyPress(KeyboardEventArgs e)
	{
		// This method simulates a frame refresh
		switch (e.Code)
		{
			case "Enter":
				Days++;
				MapFactory.SmoothMap(WorldMap);
				Player.Sleep();
				break;
			case "KeyW":
				Player.MoveUp();
				break;
			case "KeyS":
				Player.MoveDown();
				break;
			case "KeyD":
				Player.MoveRight();
				break;
			case "KeyA":
				Player.MoveLeft();
				break;
			case "KeyJ":
				Player.FertilizeSoil(1);
				break;
			case "KeyK":
				Player.WaterSoil(1);
				break;
			case "KeyL":
				Player.TightenSoil(1);
				break;
			case "KeyU":
				Player.FertilizeSoil(-1);
				break;
			case "KeyI":
				Player.WaterSoil(-1);
				break;
			case "KeyO":
				Player.TightenSoil(-1);
				break;
		}

		MapView = WorldMap.GetViewWithTargetSoil(Player.Location);
	}
}